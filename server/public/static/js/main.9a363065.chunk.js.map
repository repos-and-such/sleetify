{"version":3,"sources":["components/AddButton.js","components/InputField.js","api-service/index.js","components/AppHeader.js","components/RemoveButton.js","components/CityWeather.js","components/AppBody.js","components/ErrorMessage.js","App.js","serviceWorker.js","index.js"],"names":["AddButton","emitConfirm","className","onClick","InputField","emitValue","value","type","maxLength","spellCheck","onChange","e","target","axios","url","method","data","query","city","trim","AppHeader","emitAdd","emitError","useState","cityInput","setCityInput","handleAddCity","a","apiService","addCity","res","status","errors","includes","RemoveButton","emitRemove","handleRemove","removeCity","CityWeather","cityWeather","temperature","windspeed","humidity","unixtime","errorMessage","toFixed","moment","unix","format","AppBody","citiesWeather","map","key","id","ErrorMessage","message","App","setCitiesWeather","activeError","setActiveError","setErrorMessage","useEffect","fetchCitiesWeather","Array","isArray","showError","setTimeout","cityObject","some","existingCityObject","filteredArray","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9a363065.chunk.js","sourcesContent":["import React from 'react'\nimport './AddButton.css'\n\nexport default function AddButton({ emitConfirm }) {\n  return (\n    <button\n      className=\"AddButton\"\n      onClick={() => emitConfirm()}\n    >\n      Add City\n    </button>\n  )\n}\n","import React from 'react'\nimport './InputField.css'\n\nexport default function InputField({ emitValue, value }) {\n  return (\n    <input\n      type=\"text\"\n      maxLength=\"100\"\n      spellCheck=\"false\"\n      onChange={(e) => emitValue(e.target.value)}\n      value={value}\n    />\n  )\n}\n","import axios from 'axios';\n\nclass ApiService {\n  async fetchCitiesWeather() {\n    return await axios({\n      url: 'graphql/',\n      method: 'post',\n      data: {\n       query: `\n        query {\n          citiesWeather {\n            id\n            city\n            temperature\n            humidity\n            windspeed\n            unixtime\n          }\n        }`\n      }\n    })\n  }\n\n  async addCity(city) {\n    city.trim();\n    return await axios({\n      url: 'graphql/',\n      method: 'post',\n      data: {\n        query: \n          `mutation {\n            addCity(city: \"${city}\") {\n              id\n              city\n              temperature\n              humidity\n              windspeed\n              unixtime\n            }\n          }`\n       }      \n    });\n  }\n\n  async removeCity(city) {\n    return await axios({\n      url: 'graphql/',\n      method: 'post',\n      data: {\n        query:\n          `mutation {\n            removeCity(city: \"${city}\")\n          }`\n       }      \n    });\n  }\n}\n\nexport default new ApiService();","import React, { useState } from 'react'\nimport AddButton from './AddButton'\nimport InputField from './InputField'\nimport './AppHeader.css'\nimport apiService from '../api-service/index'\n\nexport default function AppHeader({ emitAdd, emitError }) {\n\n  const [cityInput, setCityInput] = useState('');\n\n  const handleAddCity = async () => {\n    if (!cityInput) return;\n\n    const res = await apiService.addCity(cityInput);\n\n    const { status, data: { errors } } = res;\n    if (status !== 200 || errors) {\n      emitError('An error occurred while adding City');\n      return;\n    }\n\n    const { data: { data: { addCity, addCity: { city } } } }  = res;\n    if (city.includes('ERROR:')) {\n      emitError(city);\n    } else {\n      setCityInput('');\n      emitAdd(addCity);\n    }\n  }\n\n  return (\n    <div className=\"AppHeader\">\n      <InputField \n        value={cityInput}\n        emitValue={(value) => setCityInput(value)} \n      />\n      <AddButton emitConfirm={() => handleAddCity()} />\n    </div>\n  )\n}","import React from 'react'\nimport './RemoveButton.css'\nimport apiService from '../api-service/index'\n\nexport default function RemoveButton({ city, emitRemove, emitError }) {\n\n  const handleRemove = async () => {\n    const { status, data: { data: { removeCity } } } = await apiService.removeCity(city);\n    if (status !== 200 || removeCity === 'DATABASE_ERROR') {\n      emitError('An error occurred while removing City'); \n      return;\n    };\n    emitRemove(removeCity);\n  } \n\n  return (\n    <button \n      onClick={() => handleRemove()}\n      className=\"RemoveButton\"\n    >\n      Remove\n    </button>\n    )\n}\n","import React from 'react'\nimport './CityWeather.css'\nimport moment from 'moment'\nimport RemoveButton from './RemoveButton'\n\nexport default function CityWeather({ cityWeather: { city, temperature, windspeed, humidity, unixtime }, emitRemove, emitError }) {\n  return (\n    <div className=\"CityWeather\">\n      <div className=\"CityHeader\">\n        <h1>{city}</h1>\n        <RemoveButton \n          city={city} \n          emitRemove={(city) => emitRemove(city)}\n          emitError={(errorMessage) => emitError(errorMessage)}\n        />\n      </div>\n      <h2>Temp: {!temperature || temperature.toFixed(1)}Â°C</h2>\n      <h2>Wind: {!windspeed || windspeed.toFixed(1)}m/s</h2>\n      <h2>Humidity: {!humidity || humidity.toFixed(0)}%</h2>\n      <h2>Last Updated: {moment.unix(unixtime).format(\"HH:mm\")}</h2>\n    </div>\n  )\n}\n","import React from 'react'\nimport './AppBody.css'\nimport CityWeather from './CityWeather'\n\nexport default function AppBody({ emitRemove, emitError, citiesWeather }) {\n  return (\n    <div className=\"AppBody\">\n      {citiesWeather.map(cityWeather => (\n        <CityWeather\n          key={cityWeather.id}\n          cityWeather={cityWeather}\n          emitRemove={(city) => emitRemove(city)}\n          emitError={(errorMessage) => emitError(errorMessage)}\n        />\n      ))}\n    </div>\n  );\n}\n\n\n","import React from 'react'\nimport './ErrorMessage.css'\n\nexport default function ErrorMessage({ message }) {\n  return (\n    <div className=\"ErrorMessage\">\n      { message }\n    </div>\n  )\n}\n","import React, {useState, useEffect} from 'react'\nimport './App.css'\nimport AppHeader from './components/AppHeader'\nimport AppBody from './components/AppBody'\nimport ErrorMessage from './components/ErrorMessage'\nimport apiService from './api-service/index'\n\nfunction App() {\n    \n  const [citiesWeather, setCitiesWeather] = useState([]);\n  const [activeError, setActiveError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('An error occurred');\n\n  useEffect(() => {\n    (async function fetchData() {\n      const { data: { errors }, data: { data: { citiesWeather } } } = await apiService.fetchCitiesWeather();\n      if (errors || !Array.isArray(citiesWeather)) {\n        showError('An error occurred while fetching data');\n      } else {\n        setCitiesWeather(citiesWeather);\n      }\n    })();\n  }, []);\n\n  const addCity = (cityObject) => {\n    if (citiesWeather.some(existingCityObject => existingCityObject.city === cityObject.city)) return;\n    setCitiesWeather([...citiesWeather, cityObject]);\n  }\n\n  const removeCity = (city) => {\n    const filteredArray = citiesWeather.filter(cityObject => cityObject.city !== city);\n    setCitiesWeather(filteredArray);\n  }\n\n  const showError = (errorMessage) => {\n    setErrorMessage(errorMessage);\n    setActiveError(true);\n    setTimeout(() => {\n      setActiveError(false);\n    }, 2000);\n  }\n\n  return (\n    <div className=\"App\">\n      { !activeError || <ErrorMessage message={errorMessage}/>}\n      <AppHeader \n        emitAdd={(cityObject) => addCity(cityObject)} \n        emitError={(errorMessage) => showError(errorMessage)}\n      />\n      <AppBody \n        citiesWeather={citiesWeather} \n        emitRemove={(city) => removeCity(city)}\n        emitError={(errorMessage) => showError(errorMessage)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}