{"version":3,"sources":["components/AddButton.js","components/InputField.js","api-service/index.js","components/AppHeader.js","components/RemoveButton.js","components/CityWeather.js","components/AppBody.js","App.js","serviceWorker.js","index.js"],"names":["AddButton","emitConfirm","className","onClick","InputField","emitValue","value","type","maxLength","spellCheck","onChange","e","target","axios","url","method","data","query","city","trim","AppHeader","emitAdd","useState","cityInput","setCityInput","handleAddCity","a","apiService","addCity","res","status","console","error","RemoveButton","emitRemove","handleRemove","removeCity","CityWeather","cityWeather","temperature","windspeed","humidity","unixtime","toFixed","moment","unix","format","AppBody","citiesWeather","map","key","id","App","setCitiesWeather","useEffect","fetchCitiesWeather","cityObject","some","existingCityObject","filteredArray","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"sXAGe,SAASA,EAAT,GAAqC,IAAhBC,EAAe,EAAfA,YAClC,OACE,4BACEC,UAAU,YACVC,QAAS,kBAAMF,MAFjB,Y,MCFW,SAASG,EAAT,GAA2C,IAArBC,EAAoB,EAApBA,UAAWC,EAAS,EAATA,MAC9C,OACE,2BACEC,KAAK,OACLC,UAAU,MACVC,WAAW,QACXC,SAAU,SAACC,GAAD,OAAON,EAAUM,EAAEC,OAAON,QACpCA,MAAOA,I,0CCgDE,M,uOAtDEO,IAAM,CACjBC,IAAK,WACLC,OAAQ,OACRC,KAAM,CACLC,MAAM,wM,gNAeGC,G,wEACZA,EAAKC,O,SACQN,IAAM,CACjBC,IAAK,WACLC,OAAQ,OACRC,KAAM,CACJC,MAAM,0CAAD,OAEgBC,EAFhB,iL,oNAeMA,G,iFACFL,IAAM,CACjBC,IAAK,WACLC,OAAQ,OACRC,KAAM,CACJC,MAAM,6CAAD,OAEmBC,EAFnB,sB,kJC3CE,SAASE,EAAT,GAAiC,IAAZC,EAAW,EAAXA,QAAW,EACXC,mBAAS,IADE,mBACtCC,EADsC,KAC3BC,EAD2B,KAEvCC,EAAa,uCAAG,8BAAAC,EAAA,yDACfH,EADe,iEAEFI,EAAWC,QAAQL,GAFjB,OAEdM,EAFc,OAGID,EAAgBC,EAAhCb,KAAQA,KAAQY,QAEL,MAAfC,EAAIC,QAAmBF,GAGzBJ,EAAa,IACbH,EAAQO,EAAQ,KAHhBG,QAAQC,MAAM,iCANI,2CAAH,qDAanB,OACE,yBAAK9B,UAAU,aACb,kBAAC,EAAD,CACEI,MAAOiB,EACPlB,UAAW,SAACC,GAAD,OAAWkB,EAAalB,MAErC,kBAAC,EAAD,CAAWL,YAAa,kBAAMwB,Q,uCCvBrB,SAASQ,EAAT,GAA6C,IAArBf,EAAoB,EAApBA,KAAMgB,EAAc,EAAdA,WACrCC,EAAY,uCAAG,sBAAAT,EAAA,sEACDC,EAAWS,WAAWlB,GADrB,OAEA,MAFA,OAEXY,OACNI,EAAWhB,GAEXa,QAAQC,MAAM,iCALG,2CAAH,qDASlB,OACE,4BACE7B,QAAS,kBAAMgC,KACfjC,UAAU,gBAFZ,UCVW,SAASmC,EAAT,GAAyG,IAAD,IAAjFC,YAAepB,EAAkE,EAAlEA,KAAMqB,EAA4D,EAA5DA,YAAaC,EAA+C,EAA/CA,UAAWC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,SAAYR,EAAc,EAAdA,WACvG,OACE,yBAAKhC,UAAU,eACb,yBAAKA,UAAU,cACb,4BAAKgB,GACL,kBAAC,EAAD,CAAcA,KAAMA,EAAMgB,WAAY,SAAChB,GAAD,OAAUgB,EAAWhB,OAE7D,qCAAWqB,EAAYI,QAAQ,GAA/B,SACA,qCAAWH,EAAUG,QAAQ,GAA7B,OACA,yCAAeF,EAASE,QAAQ,GAAhC,KACA,6CAAmBC,IAAOC,KAAKH,GAAUI,OAAO,WCXvC,SAASC,EAAT,GAAiD,IAA9Bb,EAA6B,EAA7BA,WAAYc,EAAiB,EAAjBA,cAE5C,OACE,yBAAK9C,UAAU,WACZ8C,EAAcC,KAAI,SAAAX,GAAW,OAC5B,kBAAC,EAAD,CACEY,IAAKZ,EAAYa,GACjBb,YAAaA,EACbJ,WAAY,SAAChB,GAAD,OAAUgB,EAAWhB,UCuB5BkC,MA7Bf,WAAgB,IAAD,EAE6B9B,mBAAS,IAFtC,mBAEN0B,EAFM,KAESK,EAFT,KAqBb,OAjBAC,qBAAU,YACR,uCAAC,4BAAA5B,EAAA,sEACmBC,EAAW4B,qBAD9B,OACO1B,EADP,OAECwB,EAAiBxB,EAAIb,KAAKA,KAAKgC,eAFhC,2CAAD,yDAIC,IAaD,yBAAK9C,UAAU,OACb,kBAAC,EAAD,CAAWmB,QAAS,SAACmC,GAAD,OAZR,SAACA,GACXR,EAAcS,MAAK,SAAAC,GAAkB,OAAIA,EAAmBxC,OAASsC,EAAWtC,SACpFmC,EAAiB,GAAD,mBAAKL,GAAL,CAAoBQ,KAUE5B,CAAQ4B,MAC5C,kBAAC,EAAD,CAASR,cAAeA,EAAed,WAAY,SAAChB,GAAD,OARpC,SAACA,GAClB,IAAMyC,EAAgBX,EAAcY,QAAO,SAAAJ,GAAU,OAAIA,EAAWtC,OAASA,KAC7EmC,EAAiBM,GAM8CvB,CAAWlB,QClB1D2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7C,GACLD,QAAQC,MAAMA,EAAM8C,c","file":"static/js/main.1b3f119c.chunk.js","sourcesContent":["import React from 'react'\nimport './AddButton.css'\n\nexport default function AddButton({ emitConfirm }) {\n  return (\n    <button\n      className=\"AddButton\"\n      onClick={() => emitConfirm()}\n    >\n      Add City\n    </button>\n  )\n}\n","import React from 'react'\nimport './InputField.css'\n\nexport default function InputField({ emitValue, value }) {\n  return (\n    <input\n      type=\"text\"\n      maxLength=\"100\"\n      spellCheck=\"false\"\n      onChange={(e) => emitValue(e.target.value)}\n      value={value}\n    />\n  )\n}\n","import axios from 'axios';\n\nclass ApiService {\n  async fetchCitiesWeather() {\n    return await axios({\n      url: 'graphql/',\n      method: 'post',\n      data: {\n       query: `\n        query {\n          citiesWeather {\n            id\n            city\n            temperature\n            humidity\n            windspeed\n            unixtime\n          }\n        }`\n      }\n    })\n  }\n\n  async addCity(city) {\n    city.trim();\n    return await axios({\n      url: 'graphql/',\n      method: 'post',\n      data: {\n        query: \n          `mutation {\n            addCity(city: \"${city}\") {\n              id\n              city\n              temperature\n              humidity\n              windspeed\n              unixtime\n            }\n          }`\n       }      \n    });\n  }\n\n  async removeCity(city) {\n    return await axios({\n      url: 'graphql/',\n      method: 'post',\n      data: {\n        query:\n          `mutation {\n            removeCity(city: \"${city}\")\n          }`\n       }      \n    });\n  }\n}\n\nexport default new ApiService();","import React, { useState } from 'react'\nimport AddButton from './AddButton'\nimport InputField from './InputField'\nimport './AppHeader.css'\nimport apiService from '../api-service/index'\n\nexport default function AppHeader({ emitAdd }) {\n  const [cityInput, setCityInput] = useState('');\n  const handleAddCity = async () => {\n    if (!cityInput) return;\n    const res = await apiService.addCity(cityInput);\n    const { data: { data: { addCity } } } = res;\n\n    if (res.status !== 200 || !addCity) {\n      console.error('Oops! Something went wrong...')\n    } else {\n      setCityInput('');\n      emitAdd(addCity[0]);\n    }\n  }\n\n  return (\n    <div className=\"AppHeader\">\n      <InputField \n        value={cityInput}\n        emitValue={(value) => setCityInput(value)} \n      />\n      <AddButton emitConfirm={() => handleAddCity()} />\n    </div>\n  )\n}","import React from 'react'\nimport './RemoveButton.css'\nimport apiService from '../api-service/index'\n\nexport default function RemoveButton({ city, emitRemove }) {\n  const handleRemove = async () => {\n    const res = await apiService.removeCity(city);\n    if (res.status === 200) {\n      emitRemove(city);\n    } else {\n      console.error('Oops! Something went wrong...')\n    }\n  } \n\n  return (\n    <button \n      onClick={() => handleRemove()}\n      className=\"RemoveButton\"\n    >\n      Remove\n    </button>\n    )\n}\n","import React from 'react'\nimport './CityWeather.css'\nimport moment from 'moment'\nimport RemoveButton from './RemoveButton'\n\nexport default function CityWeather({ cityWeather: { city, temperature, windspeed, humidity, unixtime }, emitRemove }) {\n  return (\n    <div className=\"CityWeather\">\n      <div className=\"CityHeader\">\n        <h1>{city}</h1>\n        <RemoveButton city={city} emitRemove={(city) => emitRemove(city)} />\n      </div>\n      <h2>Temp: {temperature.toFixed(1)}Â°C</h2>\n      <h2>Wind: {windspeed.toFixed(1)}m/s</h2>\n      <h2>Humidity: {humidity.toFixed(0)}%</h2>\n      <h2>Last Updated: {moment.unix(unixtime).format(\"HH:mm\")}</h2>\n    </div>\n  )\n}\n","import React from 'react'\nimport './AppBody.css'\nimport CityWeather from './CityWeather'\n\nexport default function AppBody({ emitRemove, citiesWeather }) {\n  \n  return (\n    <div className=\"AppBody\">\n      {citiesWeather.map(cityWeather => (\n        <CityWeather\n          key={cityWeather.id}\n          cityWeather={cityWeather}\n          emitRemove={(city) => emitRemove(city)}\n        />\n      ))}\n    </div>\n  );\n}\n\n\n","import React, {useState, useEffect} from 'react'\nimport './App.css'\nimport AppHeader from './components/AppHeader'\nimport AppBody from './components/AppBody'\nimport apiService from './api-service/index'\n\nfunction App() {\n    \n  const [citiesWeather, setCitiesWeather] = useState([]);\n\n  useEffect(() => {\n    (async function fetchData() {\n      const res = await apiService.fetchCitiesWeather();\n      setCitiesWeather(res.data.data.citiesWeather);\n    })();\n  }, []);\n\n  const addCity = (cityObject) => {\n    if (citiesWeather.some(existingCityObject => existingCityObject.city === cityObject.city)) return;\n    setCitiesWeather([...citiesWeather, cityObject]);\n  }\n\n  const removeCity = (city) => {\n    const filteredArray = citiesWeather.filter(cityObject => cityObject.city !== city);\n    setCitiesWeather(filteredArray);\n  }\n\n  return (\n    <div className=\"App\">\n      <AppHeader emitAdd={(cityObject) => addCity(cityObject)}/>\n      <AppBody citiesWeather={citiesWeather} emitRemove={(city) => removeCity(city)} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}